//
//  attack.h
//  Hoshizora
//
//  Created by Robert Bu on 9/2/11.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
#ifndef HTL_attack_h
#define HTL_attack_h

namespace atd {
    
    struct Attack {
      
        Attack():
        mLow(0),
        mHigh(0) {
        }
        
        Attack(int low, int high):
        mLow(low),
        mHigh(high) {
            
        }
        
        Attack& operator +=(int atk) {
            mLow += atk;
            mHigh += atk;
            return *this;
        }
        
        Attack& operator -=(int atk) {
            mLow -= atk;
            mHigh -= atk;
            return *this;
        }
        
        Attack operator +(int atk) {
            return Attack(mLow+atk, mHigh+atk);
        }
        
        Attack operator -(int atk) {
            return Attack(mLow-atk, mHigh-atk);
        }
        
        Attack operator *(float r) {
            return Attack(mLow*r, mHigh*r);
        }
        
        Attack& operator *=(float r) {
            mLow *= r;
            mHigh *= r;
            return *this;
        }
        
        Attack operator + (const Attack& rhs) {
            return Attack(mLow+rhs.mLow, mHigh+rhs.mHigh);
        }
        Attack operator - (const Attack& rhs) {
            return Attack(mLow-rhs.mLow, mHigh-rhs.mHigh);
        }
        
        int getAttack() {
            // random
            return (mLow+mHigh)/2;
        }
        
        int getLowAttack() {
            return mLow;
        }
        
        int getHighAttack() {
            return mHigh;
        }
        
        int mLow;
        int mHigh;
    };
    
    
} // namespace atd



#endif
