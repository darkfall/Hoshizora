//
//  mover.h
//  Hoshizora
//
//  Created by Robert Bu on 9/2/11.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
#ifndef HTL_mover_h
#define HTL_mover_h

#include "collidor.h"
#include "speed.h"
#include "movable.h"
#include "constants.h"
#include "SoraComponent.h"
#include "signal/SoraSignal.h"
#include <queue>

namespace atd {
    
    class Object;
    
    class Mover: public sora::SoraComponent {
    public:
        SORA_DEF_COMPONENT(Mover);
        
        Mover(Object* obj);
        
        void moveTo(const Vector2& end);
        
        virtual void onUpdate(float dt);
        
        bool isMoving() const;
        
        virtual void onMessage(sora::SoraMessageEvent* evt);
        
    protected:
        Vector2 mEnd;
        typedef std::queue<Vector2> MovingPoint;
        MovingPoint mMovingPoints;
        
        float mCurrTime;
        float mTotalTime;
        
        bool mIsMoving;
        
        Movable* mObject;
    };
    
    class TrackerMover {
    public:
        SORA_DEF_COMPONENT(TrackerMover);
        
        TrackerMover();
        
        typedef SoraSignal<void(TrackerMover&)> MoveEndSignal;
        
        template<typename T>
        sora::SoraConnection subscribeToMoveEnd(const T& func);
        
        void trackObject(Movable* obj, Movable* tracker);
        virtual void onUpdate(float dt);
        
    private:
        Movable* mTrackerObject;
        Movable* mObject;
        
        bool mIsMoving;
        MoveEndSignal mMoveEndSig;
    };
    
    template<typename T>
    inline sora::SoraConnection TrackerMover::subscribeToMoveEnd(const T& func) {
        return mMoveEndSig.connect(func);
    }
    
} // namespace atd


#endif
