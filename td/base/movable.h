//
//  movable.h
//  Hoshizora
//
//  Created by Robert Bu on 9/2/11.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
#ifndef HTL_movable_h
#define HTL_movable_h

#include "vector2.h"
#include "speed.h"
#include "collidor.h"

namespace atd {
    
    using namespace sora;
    
    struct Movable {
        
        Collidor* mCollidor;
        Speed mSpeed;
        
        Movable():
        mCollidor(0),
        mSpeed(0) {
            
        }
        
        Movable(Collidor* collidor, const Speed& speed = Speed()):
        mCollidor(collidor),
        mSpeed(speed) {
        }
        
        void setCollisionRadius(float r) {
            if(mCollidor)
                mCollidor->setCollisionRadius(r);
        }
        
        inline void transform(float dt) {
            if(mCollidor)
                mCollidor->transform(mSpeed.getSpeedVec() * dt);
        }
        
        Collidor* getCollidor() const {
            return mCollidor;
        }
        
        Vector2 getPosition() const {
            if(mCollidor)
                return mCollidor->getPosition();
            return Vector2();
        }
        
        float getPositionX() const {
            if(mCollidor)
                return mCollidor->getPosition().x;
            return 0.f;
        }
        
        float getPositionY() const {
            if(mCollidor)
                return mCollidor->getPosition().y;
            return 0.f;
        }
        
        void setPosition(const Vector2& pos) {
            if(mCollidor)
                mCollidor->setPosition(pos);
        }
        
        void setSpeed(float speed) {
            mSpeed.setSpeed(speed);
        }
        
        Speed getSpeed() const {
            return mSpeed;
        }
        
        virtual void onCollision(Movable* rhs) {
            // do something
        }
    };
    
} // namespace atd

#endif
