//
//  circle.h
//  Hoshizora
//
//  Created by Robert Bu on 9/2/11.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
#ifndef HTL_circle_h
#define HTL_circle_h

#include "vector2.h"
#include "collidor.h"

namespace atd {
    
    struct Circle: public Collidor {
      
        float mRadius;
        Vector2 mPosition;
        
        Circle():
        mRadius(1.f),
        mPosition(Vector2()) { }
        
        Circle(const Vector2& pos, float radius):
        mPosition(pos),
        mRadius(radius) { }
        
        void setRadius(float r) {
            mRadius = r;
        }
        
        void set(const Vector2& pos, float radius) {
            mPosition = pos;
            mRadius = radius;
        }
        
        float getRadius() const {
            return mRadius;
        }
        
        bool testPoint(float x, float y) const {
            float dx = mPosition.x - x;
            float dy = mPosition.y - y;
            
            float dist = dx * dx + dy * dy;
            return dist < mRadius * mRadius;
        }
        
        bool testPoint(const Vector2& pos) const {
            return testPoint(pos.x, pos.y);
        }
        
        bool intersect(const Circle& rhs) const {
            float dx = mPosition.x - rhs.mPosition.x;
            float dy = mPosition.y - rhs.mPosition.y;
            
            float dist = dx * dx + dy * dy;
            
            float dr = mRadius - rhs.mRadius;
        
            return dist < dr * dr;
        }
        
        Vector2 getPosition() const {
            return mPosition;
        }
        
        void setCollisionRadius(float r) {
            setRadius(r);
        }
        
        void setPosition(const Vector2& pos) {
            mPosition = pos;
        }
        
        void transform(const Vector2& distance) {
            mPosition += distance;
        }
        
        void draw() {
            
        }
        
        Collidor* clone() const {
            return new Circle(mPosition, mRadius);
        }
    };
    
} // namespace atd


#endif
