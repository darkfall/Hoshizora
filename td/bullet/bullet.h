//
//  bullet.h
//  Hoshizora
//
//  Created by Robert Bu on 9/2/11.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
#ifndef HTL_bullet_h
#define HTL_bullet_h

#include "base/mover.h"
#include "base/enemy.h"
#include "base/tower.h"
#include "base/constants.h"

#include "SoraFunction.h"
#include "function/SoraBind.h"
#include "SoraSprite.h"

namespace atd {
    
    struct Bullet {
        Movable mPosition;
        TrackerMover mMover;
        
        Object* mObject;
        
        int mAttack;
        bool mIsDead;
        
        sora::SoraRect mTextureRect;
        sora::SoraSprite* mTexture;
        
        Bullet(Object* obj, int atk, Collidor* collidor, const Speed& speed):
        mPosition(collidor, speed),
        mObject(obj),
        mAttack(atk),
        mIsDead(false) {
            mMover.trackObject(&mPosition, mObject->getMovable());
            mMover.subscribeToMoveEnd(sora::Bind(this, &Bullet::onMoveEnd));
            
            // mTexture = owner->getBulletTexture(); // getProperty("BulletTexture") ?
        }
        
        void update(float dt) {
            mMover.onUpdate(dt);
        }
        
        void render() {
            if(mTexture) {
                mTexture->setTextureRect(mTextureRect.x1,
                                         mTextureRect.y1,
                                         mTextureRect.x2,
                                         mTextureRect.y2);
                Vector2 pos = mPosition.getPosition();
                mTexture->render(pos.x, pos.y);
                
            }
        }
        
        void onMoveEnd(TrackerMover& source) {
            mObject->sendMessage(SID_EVENT_DAMAGE, mAttack);
            mIsDead = true;
        }
        
        int getAttack() const {
            return mAttack;
        }
        
        bool isDead() const {
            return mIsDead;
        }
    };
    
} // namespace td



#endif
