//
//  bulletFactory.h
//  Hoshizora
//
//  Created by Robert Bu on 9/2/11.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
#ifndef HTL_bulletFactory_h
#define HTL_bulletFactory_h

#include <string>
#include <map>
#include "base/vector2.h"
#include "SoraString.h"
#include "SoraMath.h"

namespace atd {

    class Bullet;
    class Object;
    class Collidor;
    
    class BulletFactory {
    public:
        
        static BulletFactory& Instance();
        
        Bullet* createBullet(const std::string& name, const Vector2& pos, Object* enemy, int atk);
        
        void load(const sora::StringType& configPath);
        
        struct BulletConfig {
            BulletConfig():
            mCollidor(0),
            mSpeed(0.f) { }
            
            BulletConfig(Collidor* col, float speed):
            mCollidor(col),
            mSpeed(speed) { }
            
            Collidor* mCollidor;
            float mSpeed;
            
            sora::SoraRect mTextureRect;
            sora::StringType mTextureName;
        };
        
        void reg(const std::string& name, const BulletConfig& config);
        
        typedef std::map<std::string, BulletConfig> BulletConfigMap;
        BulletConfigMap mConfigs;
    };
    
} // namespace atd


#endif
